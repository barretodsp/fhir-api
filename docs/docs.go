// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/encounters/{id}": {
            "get": {
                "description": "Retrieves a specific encounter with optional field filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Encounters"
                ],
                "summary": "Get encounter by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Encounter ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of fields to return (fhirId,fullUrl,status,class,period,practitionerId,patientId)",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Encounter"
                        }
                    },
                    "400": {
                        "description": "invalid field specified",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Encounter not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/patients/{id}": {
            "get": {
                "description": "Busca paciente pelo ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pacientes"
                ],
                "summary": "Retorna um paciente",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do paciente",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Patient"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/practitioner/{id}": {
            "get": {
                "description": "Retorna um Practitioner específico, filtrando os campos desejados.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "practitioners"
                ],
                "summary": "Busca um Practitioner por ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do Practitioner",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Lista de campos separados por vírgula (ex: fhirId,fullUrl,status)",
                        "name": "fields",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Erro de validação nos parâmetros",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Practitioner não encontrado",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Encounter": {
            "type": "object",
            "properties": {
                "class": {
                    "type": "string"
                },
                "fhirId": {
                    "type": "string"
                },
                "fullUrl": {
                    "type": "string"
                },
                "patientId": {
                    "type": "string"
                },
                "period": {
                    "$ref": "#/definitions/models.Period"
                },
                "practitionerId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.EncounterUpdate": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "models.Patient": {
            "type": "object",
            "properties": {
                "birthDate": {
                    "type": "string"
                },
                "familyName": {
                    "type": "string"
                },
                "fhirId": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "givenName": {
                    "type": "string"
                }
            }
        },
        "models.Period": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
